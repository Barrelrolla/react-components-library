import{j as f}from"./jsx-runtime-D_zvdyIk.js";import{t as h,a as v,c as y}from"./bundle-mjs-CFgYV38x.js";function T({underlined:e,hoverUnderline:r,hoverUnderlineOffset:n,color:a,className:t}){return{styles:h("link",e&&"underline",!e&&r&&"hover:underline",!n&&"underline-offset-1",n&&"underline-offset-2 hover:underline-offset-1",t),resolvedColor:a||"primary"}}const w="a";function g({as:e,color:r,underlined:n=!0,hoverUnderline:a=!0,hoverUnderlineOffset:t=!0,useBgColor:o=!0,className:s,style:u,children:i,...d}){const{styles:m,resolvedColor:l}=T({underlined:n,hoverUnderline:a,hoverUnderlineOffset:t,color:r,className:s}),c=e||w,p=o?v(l):y(l);return f.jsx(c,{style:{...p,...u},className:m,...d,children:i})}g.__docgenInfo={description:"",methods:[],displayName:"Anchor",props:{color:{required:!1,tsType:{name:"union",raw:`| "main"\r
| "light"\r
| "dark"\r
| "primary"\r
| "secondary"\r
| "accent"\r
| "info"\r
| "success"\r
| "warning"\r
| "error"`,elements:[{name:"literal",value:'"main"'},{name:"literal",value:'"light"'},{name:"literal",value:'"dark"'},{name:"literal",value:'"primary"'},{name:"literal",value:'"secondary"'},{name:"literal",value:'"accent"'},{name:"literal",value:'"info"'},{name:"literal",value:'"success"'},{name:"literal",value:'"warning"'},{name:"literal",value:'"error"'}]},description:"Color of the anchor element. Uses the content variant, unless specified otherwise with the `useBgColor` prop."},underlined:{required:!1,tsType:{name:"boolean"},description:"Adds underline.",defaultValue:{value:"true",computed:!1}},hoverUnderline:{required:!1,tsType:{name:"boolean"},description:"Adds underline on hover.",defaultValue:{value:"true",computed:!1}},hoverUnderlineOffset:{required:!1,tsType:{name:"boolean"},description:"Adds an offset to the underline on hover.",defaultValue:{value:"true",computed:!1}},useBgColor:{required:!1,tsType:{name:"boolean"},description:"Set to `true` if you want the anchor to use the main color, instead of the content one.",defaultValue:{value:"true",computed:!1}},as:{required:!1,tsType:{name:"T"},description:"The html element (or other component) the component should be rendered as"},ref:{required:!1,tsType:{name:"RefObject",elements:[{name:"union",raw:"ElementTypeMap<T> | null",elements:[{name:"unknown"},{name:"null"}]}],raw:"RefObject<ElementTypeMap<T> | null>"},description:""}}};export{g as A};
