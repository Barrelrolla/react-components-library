import{j as e}from"./jsx-runtime-D_zvdyIk.js";import{u as i,B as o,l as s,d as u}from"./Button-DUdPKRUv.js";import{S as m,M as d}from"./icons-B4SbTHPB.js";import"./ButtonGroup-QAOErNHl.js";function p({size:n="sm",...l}){const t=i();if(!t)throw new Error("Dark mode toggle requires a ThemeContext.");const{isDark:a,setDarkMode:r}=t;return e.jsx(o,{onClick:()=>r(a?s:u),startIcon:a?e.jsx(m,{}):e.jsx(d,{}),size:n,...l})}p.__docgenInfo={description:"Toggles between light and dark theme.",methods:[],displayName:"DarkModeToggle",props:{color:{required:!1,tsType:{name:"union",raw:`| "main"\r
| "light"\r
| "dark"\r
| "primary"\r
| "secondary"\r
| "accent"\r
| "info"\r
| "success"\r
| "warning"\r
| "error"`,elements:[{name:"literal",value:'"main"'},{name:"literal",value:'"light"'},{name:"literal",value:'"dark"'},{name:"literal",value:'"primary"'},{name:"literal",value:'"secondary"'},{name:"literal",value:'"accent"'},{name:"literal",value:'"info"'},{name:"literal",value:'"success"'},{name:"literal",value:'"warning"'},{name:"literal",value:'"error"'}]},description:"Color of the button. If none is chosen it will be `primary`."},variant:{required:!1,tsType:{name:"union",raw:'"solid" | "outline" | "ghost"',elements:[{name:"literal",value:'"solid"'},{name:"literal",value:'"outline"'},{name:"literal",value:'"ghost"'}]},description:"Button variant. If none is set it will be `solid`."},size:{required:!1,tsType:{name:"union",raw:'"xs" | "sm" | "md" | "lg" | "xl"',elements:[{name:"literal",value:'"xs"'},{name:"literal",value:'"sm"'},{name:"literal",value:'"md"'},{name:"literal",value:'"lg"'},{name:"literal",value:'"xl"'}]},description:"Button size. If none is set it will be `md`.",defaultValue:{value:'"sm"',computed:!1}},radius:{required:!1,tsType:{name:"union",raw:'"default" | "none" | "pill"',elements:[{name:"literal",value:'"default"'},{name:"literal",value:'"none"'},{name:"literal",value:'"pill"'}]},description:"Button radius. If none is set it will use the theme's default."},ghostHover:{required:!1,tsType:{name:"union",raw:'"none" | "fill" | "outline" | "contrasting"',elements:[{name:"literal",value:'"none"'},{name:"literal",value:'"fill"'},{name:"literal",value:'"outline"'},{name:"literal",value:'"contrasting"'}]},description:"If the button variant is `ghost` you can select the hover type."},retainFocusState:{required:!1,tsType:{name:"boolean"},description:"By default, while the button is focused, it will retain it's hover state, meaning an outline or ghost button will remain solid for example. Set to `false` if you don't want that behaviour."},scaling:{required:!1,tsType:{name:"boolean"},description:"By default buttons scale on press. Set to `false` if you don't want that."},disabled:{required:!1,tsType:{name:"boolean"},description:"Used to disable the button."},selected:{required:!1,tsType:{name:"boolean"},description:"In a button group for example, you can set this property to the currently selected button."},loading:{required:!1,tsType:{name:"boolean"},description:"Set to `true` when submitting a form for example. The button will show a loading indicator."},loadingPosition:{required:!1,tsType:{name:"union",raw:'"start" | "end"',elements:[{name:"literal",value:'"start"'},{name:"literal",value:'"end"'}]},description:"If the loading indicator should be shown in the start or end of the button."},startIcon:{required:!1,tsType:{name:"SVGProps",elements:[{name:"SVGSVGElement"}],raw:"SVGProps<SVGSVGElement>"},description:"Start icon. You can just pass an icon in the children, but using this prop will automatically replace that icon for a loading one if the `loading` prop is set to `true`."},endIcon:{required:!1,tsType:{name:"SVGProps",elements:[{name:"SVGSVGElement"}],raw:"SVGProps<SVGSVGElement>"},description:"Same as start icon, but at the end."},wrapperClasses:{required:!1,tsType:{name:"string"},description:"The button is wrapped in a div to change the cursor when disabled. If you need to pass any classes to that div, you can do so with this prop."},as:{required:!1,tsType:{name:"T"},description:"The html element (or other component) the component should be rendered as"},ref:{required:!1,tsType:{name:"RefObject",elements:[{name:"union",raw:"ElementTypeMap<T> | null",elements:[{name:"unknown"},{name:"null"}]}],raw:"RefObject<ElementTypeMap<T> | null>"},description:""}}};export{p as D};
